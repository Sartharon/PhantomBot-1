/* eslint-disable no-undef */
const ERROR = 2,
        WARN = 1,
        indent = 4;

module.exports = {
    'env': {
        'browser': true,
        'es6': true
    },
    'extends': 'eslint:recommended',
    'parserOptions': {
        'ecmaVersion': 2015,
        'sourceType': 'script'
    },
    'rules': {
        'array-callback-return': ['error', { 'checkForEach': true, 'allowImplicit': true }],
        'arrow-body-style': [ERROR, 'as-needed'],
        'block-spacing': ERROR,
        'brace-style': [ERROR, '1tbs', { 'allowSingleLine': false }],
        'default-case': ERROR,
        'default-case-last': ERROR,
        'camelcase': [ERROR, { 'properties': 'always' }],
        'comma-dangle': [ERROR, 'never'],
        'comma-spacing': ERROR,
        'complexity': ERROR,
        'computed-property-spacing': [ERROR, 'never'],
        'consistent-return': WARN,
        'curly': [ERROR, 'multi-line'],
        'dot-location': [ERROR, 'property'],
        'eol-last': [ERROR, 'always'],
        'eqeqeq': [WARN, 'smart'],
        'func-call-spacing': [ERROR, 'never'],
        'grouped-accessor-pairs': [ERROR, 'getBeforeSet'],
        'indent': [ERROR, indent, {
            'SwitchCase': 1,
            'outerIIFEBody': 1,
            'MemberExpression': 0,
            'ObjectExpression': 'first',
            'flatTernaryExpressions': false,
            'VariableDeclarator': { 'var': 1, 'let': 1, 'const': 2 },
            'CallExpression': { 'arguments': 1 },
            'FunctionDeclaration': { 'parameters': 'first', 'body': 1 },
            'FunctionExpression': { 'parameters': 'first', 'body': 1 },
            'ArrayExpression': 'first'
        }],
        'key-spacing': [ERROR, {'beforeColon': false, 'afterColon': true, 'mode': 'minimum'}],
        'keyword-spacing': [ERROR, {'before': true, 'after': true}],
        'max-statements-per-line': [ERROR, { 'max': 1 }],
        'multiline-comment-style': [ERROR, 'starred-block'],
        'new-cap': ERROR,
        'new-parens': [ERROR, 'always'],
        'no-bitwise': WARN,
        'no-caller': ERROR,
        'no-confusing-arrow': ERROR,
        'no-constructor-return': ERROR,
        'no-duplicate-imports': ERROR,
        'no-else-return': [ERROR, { 'allowElseIf': false }],
        'no-empty': [ERROR, { 'allowEmptyCatch': true }],
        'no-empty-function': ERROR,
        'no-console': [WARN, { allow: ['warn', 'error'] }],
        'no-eq-null': ERROR,
        'no-floating-decimal': ERROR,
        'no-implied-eval': ERROR,
        'no-invalid-this': ERROR,
        'no-labels': ERROR,
        'no-lone-blocks': ERROR,
        'no-lonely-if': ERROR,
        'no-loop-func': ERROR,
        'no-magic-numbers': [WARN, { 'ignoreArrayIndexes': true }],
        'no-mixed-operators': ERROR,
        'no-multi-spaces': ERROR,
        'no-new': ERROR,
        'no-new-wrappers': ERROR,
        'no-return-assign': ERROR,
        'no-self-compare': ERROR,
        'no-sequences': ERROR,
        'no-shadow': ERROR,
        'no-shadow-restricted-names': WARN,
        'no-tabs': ERROR,
        'no-trailing-spaces': ERROR,
        'no-unmodified-loop-condition': WARN,
        'no-unneeded-ternary': ERROR,
        'no-unused-expressions': ERROR,
        'no-unreachable-loop': WARN,
        'no-useless-concat': ERROR,
        'no-useless-rename': ERROR,
        'no-whitespace-before-property': ERROR,
        'padding-line-between-statements': [
            ERROR,
            {
                blankLine: 'always',
                next: '*',
                prev: ['block', 'block-like', 'class', 'export', 'import']
            },
            {
                blankLine: 'any',
                next: ['export', 'import'],
                prev: ['export', 'import']
            },
            {
                blankLine: 'any',
                next: ['if', 'return'],
                prev: ['if']
            }
        ],
        'semi': [ERROR, 'always'],
        'semi-spacing': [ERROR, {'before': false, 'after': true}],
        'space-before-function-paren': [ERROR, 'never'],
        'space-infix-ops': [ERROR, {'int32Hint': false}],
        'space-unary-ops': [ERROR, { 'words': true, 'nonwords': false }],
        'switch-colon-spacing': [ERROR, {'after': true, 'before': false}],
        'quotes': [WARN, 'single']
    },
    'globals': {
        $: 'readonly',
        $api: 'readonly',
        $script: 'readonly',
        clearInterval: 'readonly',
        setInterval: 'readonly',
        socket: 'readonly',
        helpers: 'readonly',
        timers: 'writable',
        run: 'writable',
        toastr: 'readonly',
        java: 'readonly',
        Packages: 'readonly',
        JavaAdapter: 'readonly',
        com: 'readonly'
    }
};
